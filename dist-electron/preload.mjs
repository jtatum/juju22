"use strict";const a=require("electron");function g(e){const t=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(const s in e)if(s!=="default"){const i=Object.getOwnPropertyDescriptor(e,s);Object.defineProperty(t,s,i.get?i:{enumerable:!0,get:()=>e[s]})}}return t.default=e,Object.freeze(t)}const u=g(a),o={list:"plugins:list",get:"plugins:get",execute:"plugins:execute-action",statuses:"plugins:statuses",getConfig:"plugins:get-config",saveConfig:"plugins:save-config"},l={list:"rules:list",get:"rules:get",save:"rules:save",delete:"rules:delete",test:"rules:test"},r={list:"variables:list",get:"variables:get",set:"variables:set",increment:"variables:increment",reset:"variables:reset",snapshot:"variables:snapshot"},{contextBridge:v,ipcRenderer:n}=u,c={plugins:{list:()=>n.invoke(o.list),get:e=>n.invoke(o.get,e),executeAction:(e,t,s)=>n.invoke(o.execute,{pluginId:e,actionId:t,params:s}),listStatuses:()=>n.invoke(o.statuses),getConfig:e=>n.invoke(o.getConfig,e),saveConfig:(e,t)=>n.invoke(o.saveConfig,{pluginId:e,config:t})},rules:{list:()=>n.invoke(l.list),get:e=>n.invoke(l.get,e),save:e=>n.invoke(l.save,e),delete:e=>n.invoke(l.delete,e),test:(e,t)=>n.invoke(l.test,{rule:e,data:t})},variables:{list:(e,t)=>n.invoke(r.list,{scope:e,ownerId:t}),get:(e,t,s)=>n.invoke(r.get,{scope:e,key:t,ownerId:s}),set:(e,t,s,i)=>n.invoke(r.set,{scope:e,key:t,value:s,ownerId:i}),increment:(e,t,s=1,i)=>n.invoke(r.increment,{scope:e,key:t,amount:s,ownerId:i}),reset:(e,t,s)=>n.invoke(r.reset,{scope:e,key:t,ownerId:s}),snapshot:(e,t)=>n.invoke(r.snapshot,{ruleId:e,pluginId:t})},events:{onPluginTrigger:e=>{const t=(s,i)=>e(i);return n.on("events:plugin-trigger",t),()=>n.off("events:plugin-trigger",t)},onPluginStatus:e=>{const t=(s,i)=>e(i);return n.on("events:plugin-status",t),()=>n.off("events:plugin-status",t)},onLogEntry:e=>{const t=(s,i)=>e(i);return n.on("events:log-entry",t),()=>n.off("events:log-entry",t)},onLogBootstrap:e=>{const t=(s,i)=>e(i);return n.on("events:log-bootstrap",t),()=>n.off("events:log-bootstrap",t)},onPluginStatusBootstrap:e=>{const t=(s,i)=>e(i);return n.on("events:plugin-status-bootstrap",t),()=>n.off("events:plugin-status-bootstrap",t)},onVariableMutation:e=>{const t=(s,i)=>e(i);return n.on("events:variables-mutated",t),()=>n.off("events:variables-mutated",t)}}};v.exposeInMainWorld("aidle",c);
